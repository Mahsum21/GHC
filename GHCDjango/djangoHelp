A-  activer l'environnement 
    $ .\MyFirstEnv\Scripts\Activate 
B-  lancer le server django 
    $ python manage.py runserver
    $ ./manage.py runserver


-------------------------------------------------------------------------------------------
1-  créer un repertoire de travail : 
    $ mkdir djangoWS
2-  ouvrir le repertoire de travail 
    $ cd djangoWS
3-  installer un environnement de travail 
    $ pip install virtualenv
4-  creer un environnement virtuel 
    $ virtualenv -p python3 MyFirstEnv
    $ virtualenv env -p python3  (deuxieme méthode à tester)
5-  creer un repertoire pour un projet
    $ mkdir MyFirstProject
6-  pour activer l'environnement 
    $ .\MyFirstEnv\Scripts\Activate 
7-  pour ouvrit le repertoire de travail 
    $ cd MyFirstProject
8-  installer django  
    $ pip install django
    $ pip freeze (visualiser les packets installés)
    $ python -m django --version (pour connaitre la version de django)
9-  creer un projet django 
    $ django-admin startproject TestProject
10- ouvrir le projet django 
    $ cd TestProject
11- installer mysqlclient 
    $ pip install mysqlclient
12- installer les migrations 
    $ python manage.py migrate
    $ manage.py migrate
13- creer une application django 
    $ django-admin startapp MyfirstApp
14- installer la debug toolsbar
    $ pip install django-debug-toolbar
15- configurer les fichiers settings.py 
    (via un IDE tel que VScode)
16- lancer le server django 
    $ python manage.py runserver

------------------------------------------------------------------
commandes supplémentaires installées : 
    $ python -m pip install Pillow (à permis de prendre en compte les classes de models)
    $ python manage.py makemigrations (pour générer les migrations automatiquement)
    $ python manage.py migrate (pour executer les migrations) 
    $ python manage.py shell (pour lancer la commande interactive de django)
    $ from Connection.models import Personne, Formation, Professeur, Horaire, Matiere (pour importer les models)
    $ isaac = Personne(nom: "isaac")
    $ isaac.save()
	$ philip = Personne.objects.create(nom="Dupont", prenom="Philip") 'créer un enregistrement en une ligne.)
	$ ./manage.py shell < myscript.py (executer un fichier python dans la console django)
	$ exec(open('myscript.py').read())

-------------------------------------------------------------------------
    $ doskey /history (pour visualiser l'historique des commandes cmd) (ou la touche F7)

    -------------------------------------------------------------------------------------
            (Les commandes dans le shell de django)

1-  pour ajouter un élément : (instancier et modifier les attribut)
    $ isaac = Personne(nom= "isaac", prenom = "mahsum")
2-  pour modifier : 
    $ isaac.prenom = "zack"
3-  pour enregister : 
    $ isaac.save()
4-  pour supprimer : 
    $ isaac.delete()
5-  pour creer en une ligne un objet(sans le save): 
    $ isaac.objects.create(nom = "tcheuyassi")
6-  pour retrouver un enregistrement dans la base de donnéé: 
    $ mahsum = Personne.objets.get(nom = "mahsum")
6-  pour creer une classe dans laquelle mahsum étudie: 
    $ 4data = Formation.object.create(nom = "4Data" )
    $ 4data.personnes.add()

    $ series = Serie.objects.filter(available = True).order_by('-createdAt')[:12]
    $ series = Serie.objects.filter(available = True).order_by('title')
    $ serie = Serie.objects.get(pk = id)
    $ series = Serie.objects.filter(title__icontains = query)
    $ if not series.exists()
    $ series = Serie.objects.filter(artists__name__icontains=query)


-----------------------------  Gabary   ---------------------------------------

{% block content %} {% endblock %} (dans le fichier parent)

{% extends 'connection/base.html' %}    (dans le fichier enfant )

{% block content %} (dans le fichier enfant)
    veuillez ajouter ici tout le contenu de remplacement; merci

    {% include 'connection/list.html' %} (permet d'inclure un gabari entier ici )
{% endblock %}

context = {}  (à passer en premier paramètre dans la méthode render pour un gabari)

{% for element in list  %}
<li> {{ element.titre }} </li>
{% endfor %}

{% if forloop.counter|divisibleby:3 %} <div class="clearfix" ></div> {% endfor %}


  <!-- emenengue dina = 6 -->




